<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ruoyi.exam.mapper.ExamQuestionsMapper">

    <resultMap type="ExamQuestions" id="ExamQuestionsResult">
        <result property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="images" column="images"/>
        <result property="type" column="type"/>
        <result property="answer" column="answer"/>
        <result property="judgeAnswer" column="judge_answer"/>
        <result property="selectAnswer" column="select_answer"/>
        <result property="analysis" column="analysis"/>
        <result property="createUser" column="create_user"/>
        <result property="createTime" column="create_time"/>
        <result property="modifyUser" column="modify_user"/>
        <result property="modifyTime" column="modify_time"/>
        <result property="isEnable" column="is_enable"/>
    </resultMap>

    <resultMap type="QuestionCount" id="ExamQuestionsCountResult">
        <result property="type" column="type"/>
        <result property="count" column="count"/>
    </resultMap>

    <sql id="selectExamQuestionsVo">
        select id, name,images, type, answer, judge_answer, select_answer, analysis, create_user, create_time, modify_user, modify_time, is_enable from exam_questions
    </sql>

    <select id="selectExamQuestionShowVo" resultType="com.ruoyi.exam.vo.ExamQuestionShowVo" parameterType="com.ruoyi.exam.domain.ExamQuestions">
        select q.id, q.name,q.images, q.type, q.answer, q.judge_answer, q.select_answer,
        q.analysis, q.create_user, q.create_time, q.modify_user, q.modify_time, q.is_enable,
        (
select group_concat(a.`name`,",") FROM exam_label as a
JOIN exam_label_questions as b
on a.id = b.label_id
where b.examination_questions_id = q.id
) as labels,
(
select group_concat(a.`name`,",") FROM exam_question_bank as a
JOIN exam_question_bank_questions as b
on a.id = b.question_bank_id
        JOIN exam_question_bank_role AS r ON r.question_bank_id = b.question_bank_id
        where b.examination_question_id = q.id
        and
        r.role_id =  #{userId}
) as banks
        from exam_questions  as q
        where q.id in (
         SELECT DISTINCT
        que.examination_question_id
        FROM
        exam_question_bank_questions AS que
        JOIN exam_question_bank_role AS r
        ON r.question_bank_id = que.question_bank_id
        WHERE
        r.role_id = #{userId}
        UNION
        select DISTINCT lab.examination_questions_id  FROM exam_label_questions as lab
        )
            <if test="name != null  and name != ''">and q.name like concat('%', #{name}, '%')</if>
            <if test="images != null  and images != ''">and q.images = #{images}</if>
            <if test="type != null  and type != ''">and q.type = #{type}</if>
            <if test="answer != null  and answer != ''">and q.answer = #{answer}</if>
            <if test="judgeAnswer != null ">and q.judge_answer = #{judgeAnswer}</if>
            <if test="selectAnswer != null  and selectAnswer != ''">and q.select_answer = #{selectAnswer}</if>
            <if test="analysis != null  and analysis != ''">and q.analysis = #{analysis}</if>
            <if test="createUser != null  and createUser != ''">and q.create_user = #{createUser}</if>
            <if test="modifyUser != null  and modifyUser != ''">and q.modify_user = #{modifyUser}</if>
            <if test="modifyTime != null ">and q.modify_time = #{modifyTime}</if>
            <if test="isEnable != null ">and q.is_enable = #{isEnable}</if>
    </select>

    <select id="selectExamQuestionsList" parameterType="ExamQuestions" resultMap="ExamQuestionsResult">
        <include refid="selectExamQuestionsVo"/>
        <where>
            <if test="name != null  and name != ''">and name like concat('%', #{name}, '%')</if>
            <if test="images != null  and images != ''">and images = #{images}</if>
            <if test="type != null  and type != ''">and type = #{type}</if>
            <if test="answer != null  and answer != ''">and answer = #{answer}</if>
            <if test="judgeAnswer != null ">and judge_answer = #{judgeAnswer}</if>
            <if test="selectAnswer != null  and selectAnswer != ''">and select_answer = #{selectAnswer}</if>
            <if test="analysis != null  and analysis != ''">and analysis = #{analysis}</if>
            <if test="createUser != null  and createUser != ''">and create_user = #{createUser}</if>
            <if test="modifyUser != null  and modifyUser != ''">and modify_user = #{modifyUser}</if>
            <if test="modifyTime != null ">and modify_time = #{modifyTime}</if>
            <if test="isEnable != null ">and is_enable = #{isEnable}</if>
        </where>
    </select>


    <select id="selectExamQuestionsById" parameterType="Long" resultMap="ExamQuestionsResult">
        <include refid="selectExamQuestionsVo"/>
        where id = #{id}
    </select>

<!-- TODO 目前存在的bug 不能只通过题库或者标签去生成题目 -->
    <select id="selectExamQuestionByLabelsBanks" parameterType="ExamPaperDetail" resultMap="ExamQuestionsResult">
        <include refid="selectExamQuestionsVo"></include>
        where id in
        (
        SELECT a.id from (
        SELECT lab.examination_questions_id as id FROM
        exam_label_questions as lab JOIN
        exam_question_bank_questions as bank
        on lab.examination_questions_id = bank.examination_question_id
        LEFT JOIN exam_questions as q
        on q.id = bank.examination_question_id
        WHERE q.type = 'select'
        <if test="labelList != null and labelList.length>0 ">
            and lab.label_id in
            <foreach collection="labelList" index="index" item="item" separator="," open="(" close=")">
                #{item}
            </foreach>
        </if>
        <if test="bankList != null and bankList.length>0 ">
            and bank.question_bank_id in
            <foreach collection="bankList" index="index" item="item" separator="," open="(" close=")">
                #{item}
            </foreach>
        </if>
        <if test="questionId != null and questionId.length>0 ">
            and q.id not in
            <foreach collection="questionId" index="index" item="item" separator="," open="(" close=")">
                #{item}
            </foreach>
        </if>
        GROUP BY lab.examination_questions_id
        ORDER BY RAND() limit #{selectCount}
        ) as a
        UNION
        SELECT a.id from (
        SELECT lab.examination_questions_id as id FROM
        exam_label_questions as lab JOIN
        exam_question_bank_questions as bank
        on lab.examination_questions_id = bank.examination_question_id
        LEFT JOIN exam_questions as q
        on q.id = bank.examination_question_id
        WHERE q.type = 'selects'
        <if test="labelList != null and labelList.length>0 ">
            and lab.label_id in
            <foreach collection="labelList" index="index" item="item" separator="," open="(" close=")">
                #{item}
            </foreach>
        </if>
        <if test="bankList != null and bankList.length>0 ">
            and bank.question_bank_id in
            <foreach collection="bankList" index="index" item="item" separator="," open="(" close=")">
                #{item}
            </foreach>
        </if>
        <if test="questionId != null and questionId.length>0 ">
            and q.id not in
            <foreach collection="questionId" index="index" item="item" separator="," open="(" close=")">
                #{item}
            </foreach>
        </if>
        GROUP BY lab.examination_questions_id
        ORDER BY RAND() limit #{selectsCount}
        ) as a
        UNION
        SELECT a.id from (
        SELECT lab.examination_questions_id as id FROM
        exam_label_questions as lab JOIN
        exam_question_bank_questions as bank
        on lab.examination_questions_id = bank.examination_question_id
        LEFT JOIN exam_questions as q
        on q.id = bank.examination_question_id
        WHERE q.type = 'judge'
        <if test="labelList != null and labelList.length>0 ">
            and lab.label_id in
            <foreach collection="labelList" index="index" item="item" separator="," open="(" close=")">
                #{item}
            </foreach>
        </if>
        <if test="bankList != null and bankList.length>0 ">
            and bank.question_bank_id in
            <foreach collection="bankList" index="index" item="item" separator="," open="(" close=")">
                #{item}
            </foreach>
        </if>
        <if test="questionId != null and questionId.length>0 ">
            and q.id not in
            <foreach collection="questionId" index="index" item="item" separator="," open="(" close=")">
                #{item}
            </foreach>
        </if>
        GROUP BY lab.examination_questions_id
        ORDER BY RAND() limit #{judgeCount}
        ) as a
        UNION
        SELECT a.id from (
        SELECT lab.examination_questions_id as id FROM
        exam_label_questions as lab JOIN
        exam_question_bank_questions as bank
        on lab.examination_questions_id = bank.examination_question_id
        LEFT JOIN exam_questions as q
        on q.id = bank.examination_question_id
        WHERE q.type = 'answer'
        <if test="labelList != null and labelList.length>0 ">
            and lab.label_id in
            <foreach collection="labelList" index="index" item="item" separator="," open="(" close=")">
                #{item}
            </foreach>
        </if>
        <if test="bankList != null and bankList.length>0 ">
            and bank.question_bank_id in
            <foreach collection="bankList" index="index" item="item" separator="," open="(" close=")">
                #{item}
            </foreach>
        </if>
        <if test="questionId != null and questionId.length>0 ">
            and q.id not in
            <foreach collection="questionId" index="index" item="item" separator="," open="(" close=")">
                #{item}
            </foreach>
        </if>
        GROUP BY lab.examination_questions_id
        ORDER BY RAND() limit #{answerCount}
        ) as a
        )
    </select>

    <select id="selectExamQuestionCountByType" parameterType="ExamPaperDetail" resultMap="ExamQuestionsCountResult">
        SELECT s.type as type,count(s.id)  as count from (
        SELECT
        DISTINCT
        question.id as id,
        question.type as type
        FROM
        exam_questions as question
        left join exam_label_questions as label
        on question.id = label.examination_questions_id
        left join exam_question_bank_questions as bank
        on question.id = bank.examination_question_id
        <where>
            <trim prefixOverrides="and" suffixOverrides="and">
                <if test="labelList != null and labelList.length>0 ">
                    and label.label_id in
                    <foreach collection="labelList" index="index" item="item" separator="," open="(" close=")">
                        #{item}
                    </foreach>
                </if>
                <if test="bankList != null and bankList.length>0 ">
                    and bank.question_bank_id in
                    <foreach collection="bankList" index="index" item="item" separator="," open="(" close=")">
                        #{item}
                    </foreach>
                </if>
            </trim>
        </where>
        ) as s
        GROUP BY s.type
    </select>

    <insert id="insertExamQuestions" parameterType="ExamQuestions" useGeneratedKeys="true" keyProperty="id">
        insert into exam_questions
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="name != null">name,</if>
            <if test="images != null">images,</if>
            <if test="type != null">type,</if>
            <if test="answer != null">answer,</if>
            <if test="judgeAnswer != null">judge_answer,</if>
            <if test="selectAnswer != null">select_answer,</if>
            <if test="analysis != null">analysis,</if>
            <if test="createUser != null">create_user,</if>
            <if test="createTime != null">create_time,</if>
            <if test="modifyUser != null">modify_user,</if>
            <if test="modifyTime != null">modify_time,</if>
            <if test="isEnable != null">is_enable,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="name != null">#{name},</if>
            <if test="images != null">#{images},</if>
            <if test="type != null">#{type},</if>
            <if test="answer != null">#{answer},</if>
            <if test="judgeAnswer != null">#{judgeAnswer},</if>
            <if test="selectAnswer != null">#{selectAnswer},</if>
            <if test="analysis != null">#{analysis},</if>
            <if test="createUser != null">#{createUser},</if>
            <if test="createTime != null">#{createTime},</if>
            <if test="modifyUser != null">#{modifyUser},</if>
            <if test="modifyTime != null">#{modifyTime},</if>
            <if test="isEnable != null">#{isEnable},</if>
        </trim>
    </insert>

    <update id="updateExamQuestions" parameterType="ExamQuestions">
        update exam_questions
        <trim prefix="SET" suffixOverrides=",">
            <if test="name != null">name = #{name},</if>
            <if test="images != null">images = #{images},</if>
            <if test="type != null">type = #{type},</if>
            <if test="answer != null">answer = #{answer},</if>
            <if test="judgeAnswer != null">judge_answer = #{judgeAnswer},</if>
            <if test="selectAnswer != null">select_answer = #{selectAnswer},</if>
            <if test="analysis != null">analysis = #{analysis},</if>
            <if test="createUser != null">create_user = #{createUser},</if>
            <if test="createTime != null">create_time = #{createTime},</if>
            <if test="modifyUser != null">modify_user = #{modifyUser},</if>
            <if test="modifyTime != null">modify_time = #{modifyTime},</if>
            <if test="isEnable != null">is_enable = #{isEnable},</if>
        </trim>
        where id = #{id}
    </update>

    <delete id="deleteExamQuestionsById" parameterType="Long">
        delete from exam_questions where id = #{id}
    </delete>

    <delete id="deleteExamQuestionsByIds" parameterType="String">
        delete from exam_questions where id in
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>
</mapper>